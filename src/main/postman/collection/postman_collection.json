{
	"info": {
		"_postman_id": "538d78b6-1df8-461d-9a72-94b8ccbeb7d3",
		"name": "Quarkus Server-Sent Event (SSE) Proof of Concept (PoC)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17282"
	},
	"item": [
		{
			"name": "1. Generate PDF",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Estrae il processId dal corpo della risposta (che Ã¨ testo semplice)",
							"const processId = pm.response.text();",
							"",
							"// Imposta il processId come variabile di collezione per usarlo nella prossima richiesta",
							"pm.collectionVariables.set(\"processId\", processId);",
							"console.log(`Process ID salvato: ${processId}`);",
							"",
							"// Test per verificare che la risposta sia un UUID valido",
							"pm.test(\"Response should be a valid UUID\", function () {",
							"    const responseText = pm.response.text();",
							"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;",
							"    pm.expect(responseText).to.match(uuidRegex, \"The process ID is not a valid UUID\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/pdf/generate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"pdf",
						"generate"
					]
				},
				"description": "Avvia il processo di generazione del PDF e restituisce un ID di processo."
			},
			"response": []
		},
		{
			"name": "2. Get PDF Status (SSE)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// I test per le richieste SSE vengono eseguiti dopo la chiusura della connessione.",
							"pm.test(\"Should receive PDF_COMPLETED event\", function () {",
							"    const responseBody = pm.response.text();",
							"    // Verifica che il nome dell'evento sia presente",
							"    pm.expect(responseBody).to.include(\"event:PDF_COMPLETED\", \"Response should contain the PDF_COMPLETED event name\");",
							"});",
							"",
							"pm.test(\"The event data should be a valid JSON with correct details\", function () {",
							"    const responseBody = pm.response.text();",
							"    const expectedProcessId = pm.collectionVariables.get(\"processId\");",
							"",
							"    // Estrae la riga 'data:' che contiene il JSON",
							"    const dataLine = responseBody.split('\\n').find(line => line.startsWith(\"data:\"));",
							"    pm.expect(dataLine, \"Could not find data line in SSE response\").to.not.be.undefined;",
							"",
							"    // Estrae e fa il parsing del JSON",
							"    try {",
							"        const jsonData = dataLine.substring(\"data: \".length);",
							"        const eventData = JSON.parse(jsonData);",
							"",
							"        // Verifica il contenuto del JSON",
							"        pm.expect(eventData).to.have.property('processId', expectedProcessId);",
							"        pm.expect(eventData).to.have.property('downloadUrl', `/api/pdf/download/${expectedProcessId}`);",
							"        console.log(`Received event data: ${JSON.stringify(eventData)}`);",
							"",
							"    } catch (e) {",
							"        pm.expect.fail(\"Failed to parse JSON from SSE data: \" + e.message);",
							"    }",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/pdf/status/{{processId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"pdf",
						"status",
						"{{processId}}"
					]
				},
				"description": "Si connette all'endpoint SSE per ricevere lo stato della generazione del PDF. Utilizza il `processId` ottenuto dalla richiesta precedente."
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		},
		{
			"key": "processId",
			"value": "",
			"type": "string"
		}
	]
}